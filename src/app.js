/**
 * Arquivo principal da aplica√ß√£o ZapZap
 * Respons√°vel por inicializar o servidor e configurar as depend√™ncias
 */

const { getContainer } = require('./config/dependencies');
const createServer = require('./config/server');

// Configura√ß√µes do ambiente
const PORT = process.env.PORT || 3000;
const NODE_ENV = process.env.NODE_ENV || 'development';

/**
 * Inicializa a aplica√ß√£o
 */
async function startApplication() {
  try {
    console.log('üöÄ Iniciando ZapZap...');
    
    // Inicializa o container de depend√™ncias
    const container = getContainer();
    console.log('üì¶ Container de depend√™ncias configurado');
    
    // Cria o servidor Express
    const app = createServer(container);
    console.log('‚öôÔ∏è  Servidor Express configurado');
    
    // Inicia o servidor
    const server = app.listen(PORT, () => {
      console.log(`üåü ZapZap rodando em http://localhost:${PORT}`);
      console.log(`üîß Ambiente: ${NODE_ENV}`);
      console.log('üì± Acesse a aplica√ß√£o no navegador para conectar ao WhatsApp');
    });

    // Tratamento de sinais para shutdown graceful
    process.on('SIGTERM', () => {
      console.log('üõë SIGTERM recebido. Iniciando shutdown graceful...');
      gracefulShutdown(server, container);
    });

    process.on('SIGINT', () => {
      console.log('üõë SIGINT recebido. Iniciando shutdown graceful...');
      gracefulShutdown(server, container);
    });

    // Tratamento de erros n√£o capturados
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Erro n√£o capturado:', error);
      gracefulShutdown(server, container);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Promise rejeitada n√£o tratada:', reason);
      console.error('Promise:', promise);
      gracefulShutdown(server, container);
    });

  } catch (error) {
    console.error('‚ùå Erro ao inicializar aplica√ß√£o:', error);
    process.exit(1);
  }
}

/**
 * Realiza shutdown graceful da aplica√ß√£o
 * @param {*} server 
 * @param {*} container 
 */
async function gracefulShutdown(server, container) {
  console.log('üîÑ Iniciando processo de shutdown...');
  
  try {
    // Fecha o servidor HTTP
    server.close(() => {
      console.log('üö´ Servidor HTTP fechado');
    });

    // Desconecta do WhatsApp se conectado
    if (container.has('whatsAppService')) {
      const whatsAppService = container.get('whatsAppService');
      await whatsAppService.disconnect();
      console.log('üì± WhatsApp desconectado');
    }

    console.log('‚úÖ Shutdown conclu√≠do com sucesso');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro durante shutdown:', error);
    process.exit(1);
  }
}

// Inicia a aplica√ß√£o se este arquivo for executado diretamente
if (require.main === module) {
  startApplication();
}

module.exports = { startApplication, gracefulShutdown };